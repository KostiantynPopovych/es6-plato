{
  "/Users/work/Documents/projects/depngn/coverage/lcov-report/block-navigation.js": {
    "filePath": "/Users/work/Documents/projects/depngn/coverage/lcov-report/block-navigation.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'goToPrevious' has a complexity of 4. Maximum allowed is 2.",
        "line": 41,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 50,
        "endColumn": 6,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'goToNext' has a complexity of 3. Maximum allowed is 2.",
        "line": 52,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 63,
        "endColumn": 6,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'jump' has a complexity of 8. Maximum allowed is 2.",
        "line": 65,
        "column": 12,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 85,
        "endColumn": 6,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/coverage/lcov-report/prettify.js": {
    "filePath": "/Users/work/Documents/projects/depngn/coverage/lcov-report/prettify.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 55 exceeds maximum 15 (47/30/1).",
        "line": 2,
        "column": 41,
        "nodeType": "FunctionExpression",
        "endLine": 2,
        "endColumn": 15782,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'k' has a complexity of 8. Maximum allowed is 2.",
        "line": 2,
        "column": 2525,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 5372,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 21 exceeds maximum 15 (18/7/10).",
        "line": 2,
        "column": 2525,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 5372,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 149 to the 15 allowed.",
        "line": 2,
        "column": 2534,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 2535,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 2612,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 2616,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'ab' has a complexity of 7. Maximum allowed is 2.",
        "line": 2,
        "column": 2791,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 3056,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 2876,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 2881,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'T' has a complexity of 7. Maximum allowed is 2.",
        "line": 2,
        "column": 3056,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 3220,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'X' has a complexity of 18. Maximum allowed is 2.",
        "line": 2,
        "column": 3220,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 4215,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 45 exceeds maximum 15 (23/26/30).",
        "line": 2,
        "column": 3220,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 4215,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 3483,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 3489,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ar' is already defined.",
        "line": 2,
        "column": 3893,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 3895,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 3924,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 3930,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ar' is already defined.",
        "line": 2,
        "column": 4061,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4063,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'at' is already defined.",
        "line": 2,
        "column": 4089,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4091,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 4092,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4098,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'W' has a complexity of 23. Maximum allowed is 2.",
        "line": 2,
        "column": 4215,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 5198,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 37 exceeds maximum 15 (29/10/22).",
        "line": 2,
        "column": 4215,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 5198,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 4490,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4496,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4583,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4589,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4604,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4606,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4636,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4642,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4644,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4650,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4665,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4667,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'am' is already defined.",
        "line": 2,
        "column": 4670,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4672,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ag' is already defined.",
        "line": 2,
        "column": 4691,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4693,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 4694,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4700,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4722,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4728,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4742,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4748,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'af' is already defined.",
        "line": 2,
        "column": 4789,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4791,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4824,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4830,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4836,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4842,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4854,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4856,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'am' is already defined.",
        "line": 2,
        "column": 4859,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4861,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4885,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4891,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 4909,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4915,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4949,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4951,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ag' is already defined.",
        "line": 2,
        "column": 4970,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4972,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 4973,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 4979,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 5027,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5033,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 5059,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5065,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'V' is already defined.",
        "line": 2,
        "column": 5216,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5217,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'U' is already defined.",
        "line": 2,
        "column": 5220,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5221,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ae' is already defined.",
        "line": 2,
        "column": 5244,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5246,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 5247,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5251,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 1,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 2,
        "column": 5335,
        "nodeType": "NewExpression",
        "endLine": 2,
        "endColumn": 5371,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'a' has a complexity of 4. Maximum allowed is 2.",
        "line": 2,
        "column": 5372,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 6109,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 25 to the 15 allowed.",
        "line": 2,
        "column": 5381,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 5382,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'aa' has a complexity of 10. Maximum allowed is 2.",
        "line": 2,
        "column": 5652,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 6047,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 21 exceeds maximum 15 (16/4/14).",
        "line": 2,
        "column": 5652,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 6047,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 5825,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5829,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 5992,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 5996,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'o' has a complexity of 7. Maximum allowed is 2.",
        "line": 2,
        "column": 6220,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 6388,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 59 to the 15 allowed.",
        "line": 2,
        "column": 6397,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 6398,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 5. Maximum allowed is 2.",
        "line": 2,
        "column": 6420,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 6697,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 16 exceeds maximum 15 (14/6/5).",
        "line": 2,
        "column": 6420,
        "nodeType": "FunctionExpression",
        "endLine": 2,
        "endColumn": 6697,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 6512,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 6518,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 6621,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 6635,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 6653,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 6659,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 15. Maximum allowed is 2.",
        "line": 2,
        "column": 6722,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 7511,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 44 exceeds maximum 15 (34/14/25).",
        "line": 2,
        "column": 6722,
        "nodeType": "FunctionExpression",
        "endLine": 2,
        "endColumn": 7511,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 6867,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 6873,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 6881,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 6887,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 7038,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 7043,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 7206,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 7212,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'i' has a complexity of 11. Maximum allowed is 2.",
        "line": 2,
        "column": 7521,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 9272,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 30 exceeds maximum 15 (5/21/21).",
        "line": 2,
        "column": 7521,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 9272,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.",
        "line": 2,
        "column": 7530,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 7531,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 7585,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 7769,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7590,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7591,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7610,
                7611
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7610,
                7610
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7592,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7593,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7612,
                7613
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7612,
                7612
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7594,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7595,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7614,
                7615
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7614,
                7614
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7601,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7602,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7621,
                7622
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7621,
                7621
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7616,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7617,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7636,
                7637
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7636,
                7636
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7628,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7629,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7648,
                7649
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7648,
                7648
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7637,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7638,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7657,
                7658
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7657,
                7657
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7639,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7640,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7659,
                7660
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7659,
                7659
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7641,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7642,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7661,
                7662
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7661,
                7661
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7647,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7648,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7667,
                7668
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7667,
                7667
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7649,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7650,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7669,
                7670
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7669,
                7669
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7651,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7652,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7671,
                7672
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7671,
                7671
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7658,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7659,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7678,
                7679
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7678,
                7678
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7673,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7674,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7693,
                7694
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7693,
                7693
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7685,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7686,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7705,
                7706
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7705,
                7705
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7694,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7695,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7714,
                7715
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7714,
                7714
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7696,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7697,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7716,
                7717
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7716,
                7716
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7698,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7699,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7718,
                7719
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7718,
                7718
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7704,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7705,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7724,
                7725
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7724,
                7724
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7713,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7714,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7733,
                7734
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7733,
                7733
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7730,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7731,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7750,
                7751
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7750,
                7750
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7736,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7737,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7756,
                7757
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7756,
                7756
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7745,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7746,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7765,
                7766
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7765,
                7765
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7762,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7763,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7782,
                7783
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7782,
                7782
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7826,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7827,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7846,
                7847
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7846,
                7846
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7835,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7836,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7855,
                7856
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7855,
                7855
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7852,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7853,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7872,
                7873
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7872,
                7872
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7858,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7859,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7878,
                7879
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7878,
                7878
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7867,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7868,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7887,
                7888
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7887,
                7887
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7884,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7885,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7904,
                7905
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7904,
                7904
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7890,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7891,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7910,
                7911
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7910,
                7910
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7899,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7900,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7919,
                7920
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7919,
                7919
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7916,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7917,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7936,
                7937
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7936,
                7936
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7958,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7959,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7978,
                7979
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7978,
                7978
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7967,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7968,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                7987,
                7988
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                7987,
                7987
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7983,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7984,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8003,
                8004
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8003,
                8003
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7989,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7990,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8009,
                8010
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8009,
                8009
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7998,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7999,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8018,
                8019
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8018,
                8018
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8014,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8015,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8034,
                8035
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8034,
                8034
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8071,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8072,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8091,
                8092
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8091,
                8091
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8078,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8079,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8098,
                8099
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8098,
                8098
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8082,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8083,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8102,
                8103
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8102,
                8102
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8084,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8085,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8104,
                8105
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8104,
                8104
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8091,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8092,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                8111,
                8112
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                8111,
                8111
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 8357,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 8427,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 1,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 2,
        "column": 8717,
        "nodeType": "NewExpression",
        "endLine": 2,
        "endColumn": 8744,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-non-literal-regexp",
        "severity": 1,
        "message": "Found non-literal argument to RegExp Constructor",
        "line": 2,
        "column": 8847,
        "nodeType": "NewExpression",
        "endLine": 2,
        "endColumn": 8897,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression (new RegExp)",
        "line": 2,
        "column": 9076,
        "nodeType": "NewExpression",
        "endLine": 2,
        "endColumn": 9177,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\..",
        "line": 2,
        "column": 9231,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9232,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                9251,
                9252
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                9251,
                9251
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 9235,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9236,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                9255,
                9256
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                9255,
                9255
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 9237,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9238,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                9257,
                9258
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                9257,
                9257
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 9239,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9240,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                9259,
                9260
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                9259,
                9259
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 9241,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9242,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                9261,
                9262
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                9261,
                9261
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\#.",
        "line": 2,
        "column": 9243,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9244,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                9263,
                9264
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                9263,
                9263
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'Q' has a complexity of 10. Maximum allowed is 2.",
        "line": 2,
        "column": 9373,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 10970,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 28 exceeds maximum 15 (20/13/15).",
        "line": 2,
        "column": 9373,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 10970,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 64 to the 15 allowed.",
        "line": 2,
        "column": 9382,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 9383,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'ae' has a complexity of 12. Maximum allowed is 2.",
        "line": 2,
        "column": 9747,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 10260,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 18 exceeds maximum 15 (8/11/12).",
        "line": 2,
        "column": 9747,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 10260,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'ad' has a complexity of 5. Maximum allowed is 2.",
        "line": 2,
        "column": 10260,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 10635,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'ai' has a complexity of 4. Maximum allowed is 2.",
        "line": 2,
        "column": 10332,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 10541,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 2,
        "column": 10666,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 10670,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'Y' is already defined.",
        "line": 2,
        "column": 10812,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 10813,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 10839,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 10843,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'D' has a complexity of 15. Maximum allowed is 2.",
        "line": 2,
        "column": 10970,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 11894,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 61 exceeds maximum 15 (56/10/23).",
        "line": 2,
        "column": 10970,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 11894,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 24 to the 15 allowed.",
        "line": 2,
        "column": 10979,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 10980,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 11173,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11177,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 11213,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11218,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 11305,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11310,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ae' is assigned a value but never used.",
        "line": 2,
        "column": 11414,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11416,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'af' is assigned a value but never used.",
        "line": 2,
        "column": 11438,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11440,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 11441,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11447,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ag' is assigned a value but never used.",
        "line": 2,
        "column": 11471,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11473,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 11474,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11478,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'W' is already defined.",
        "line": 2,
        "column": 11501,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 11502,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'c' has a complexity of 4. Maximum allowed is 2.",
        "line": 2,
        "column": 11903,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 12071,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 11953,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11957,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 11964,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 11978,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 11983,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 11987,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'q' has a complexity of 4. Maximum allowed is 2.",
        "line": 2,
        "column": 12071,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 12179,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 12097,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 12111,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 12174,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 12178,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 12253,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12254,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12273,
                12274
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12273,
                12273
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 12269,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12270,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12289,
                12290
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12289,
                12289
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12685,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12686,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12705,
                12706
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12705,
                12705
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12689,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12690,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12709,
                12710
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12709,
                12709
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12693,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12694,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12713,
                12714
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12713,
                12713
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12697,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12698,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12717,
                12718
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12717,
                12717
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12701,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12702,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12721,
                12722
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12721,
                12721
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12705,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12706,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12725,
                12726
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12725,
                12725
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 12728,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 12763,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 12768,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 12808,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12835,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12836,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12855,
                12856
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12855,
                12855
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12837,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12838,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12857,
                12858
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12857,
                12857
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12849,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12850,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12869,
                12870
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12869,
                12869
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12851,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12852,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12871,
                12872
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12871,
                12871
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 12855,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12856,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12875,
                12876
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12875,
                12875
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 12881,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12882,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12901,
                12902
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12901,
                12901
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12913,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12914,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12933,
                12934
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12933,
                12933
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12918,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12919,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12938,
                12939
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12938,
                12938
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12923,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12924,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12943,
                12944
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12943,
                12943
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12954,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12955,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12974,
                12975
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12974,
                12974
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12959,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12960,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12979,
                12980
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12979,
                12979
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12964,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12965,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                12984,
                12985
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                12984,
                12984
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12998,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12999,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13018,
                13019
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13018,
                13018
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13000,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13001,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13020,
                13021
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13020,
                13020
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13038,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13039,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13058,
                13059
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13058,
                13058
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13043,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13044,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13063,
                13064
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13063,
                13063
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13048,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13049,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13068,
                13069
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13068,
                13068
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13080,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13081,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13100,
                13101
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13100,
                13100
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13085,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13086,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13105,
                13106
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13105,
                13105
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13090,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13091,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13110,
                13111
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13110,
                13110
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13125,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13126,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13145,
                13146
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13145,
                13145
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13127,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13128,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                13147,
                13148
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                13147,
                13147
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'd' has a complexity of 5. Maximum allowed is 2.",
        "line": 2,
        "column": 14061,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 14269,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'b' has a complexity of 4. Maximum allowed is 2.",
        "line": 2,
        "column": 14425,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 15491,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 16 exceeds maximum 15 (15/5/3).",
        "line": 2,
        "column": 14425,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 15491,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 59 to the 15 allowed.",
        "line": 2,
        "column": 14434,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 2,
        "endColumn": 14435,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 14588,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 14594,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 2,
        "column": 14618,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 14627,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 2,
        "column": 14618,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 14624,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ae' is assigned a value but never used.",
        "line": 2,
        "column": 14757,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14759,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'U' has a complexity of 22. Maximum allowed is 2.",
        "line": 2,
        "column": 14778,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 2,
        "endColumn": 15487,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 27 exceeds maximum 15 (16/12/19).",
        "line": 2,
        "column": 14778,
        "nodeType": "FunctionDeclaration",
        "endLine": 2,
        "endColumn": 15487,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 2,
        "column": 14895,
        "nodeType": "MemberExpression",
        "endLine": 2,
        "endColumn": 14899,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 15291,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 15316,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15786,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15788,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15809,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15811,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15835,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15837,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15875,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15877,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 15892,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 15893,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                15912,
                15913
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                15912,
                15912
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 15908,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 15909,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                15928,
                15929
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                15928,
                15928
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15918,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15920,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16362,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16364,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16410,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16412,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16453,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16455,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16498,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16500,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16551,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16553,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16574,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16576,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16597,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16599,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16646,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16648,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 16659,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 16711,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16661,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16662,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16681,
                16682
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16681,
                16681
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16676,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16677,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16696,
                16697
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16696,
                16696
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16708,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16709,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16728,
                16729
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16728,
                16728
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16719,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16721,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 16732,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 16784,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16734,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16735,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16754,
                16755
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16754,
                16754
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16749,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16750,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16769,
                16770
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16769,
                16769
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16781,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16782,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16801,
                16802
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16801,
                16801
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 16817,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16818,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16837,
                16838
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16837,
                16837
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16819,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16820,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16839,
                16840
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16839,
                16839
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16821,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16822,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16841,
                16842
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16841,
                16841
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16833,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16835,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 16860,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16861,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                16880,
                16881
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                16880,
                16880
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 16947,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17023,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 16991,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16992,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17011,
                17012
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17011,
                17011
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17026,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17028,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17040,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17076,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 17059,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17060,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17079,
                17080
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17079,
                17079
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17079,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17081,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17111,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17113,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17125,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17158,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17161,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17163,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17175,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17200,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17203,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17205,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17215,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17282,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 17256,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17257,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17276,
                17277
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17276,
                17276
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17285,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17287,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 17311,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17312,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17331,
                17332
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17331,
                17331
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 17313,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17314,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17333,
                17334
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17333,
                17333
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17331,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17333,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17354,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17356,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17380,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17382,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 2,
        "column": 17394,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 17461,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 17435,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17436,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17455,
                17456
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17455,
                17455
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17477,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17479,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17500,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17502,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17526,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17528,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 17543,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17544,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17563,
                17564
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17563,
                17563
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 17545,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17546,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17565,
                17566
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17565,
                17565
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 17547,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17548,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                17567,
                17568
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                17567,
                17567
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/coverage/lcov-report/sorter.js": {
    "filePath": "/Users/work/Documents/projects/depngn/coverage/lcov-report/sorter.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 24,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 24,
        "endColumn": 58,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'onFilterInput' has a complexity of 3. Maximum allowed is 2.",
        "line": 27,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 42,
        "endColumn": 6,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 31,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 31,
        "endColumn": 32,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'loadColumns' has a complexity of 4. Maximum allowed is 2.",
        "line": 53,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 75,
        "endColumn": 6,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 61,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 61,
        "endColumn": 34,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'loadRowData' has a complexity of 3. Maximum allowed is 2.",
        "line": 78,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 95,
        "endColumn": 6,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 86,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 86,
        "endColumn": 35,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 87,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 87,
        "endColumn": 26,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 102,
        "column": 13,
        "nodeType": "MemberExpression",
        "endLine": 102,
        "endColumn": 20,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 102,
        "column": 40,
        "nodeType": "MemberExpression",
        "endLine": 102,
        "endColumn": 47,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'sortByIndex' has a complexity of 4. Maximum allowed is 2.",
        "line": 106,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 135,
        "endColumn": 6,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 107,
        "column": 19,
        "nodeType": "MemberExpression",
        "endLine": 107,
        "endColumn": 30,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 3. Maximum allowed is 2.",
        "line": 108,
        "column": 22,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 112,
        "endColumn": 14,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 109,
        "column": 21,
        "nodeType": "MemberExpression",
        "endLine": 109,
        "endColumn": 32,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 110,
        "column": 21,
        "nodeType": "MemberExpression",
        "endLine": 110,
        "endColumn": 32,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 126,
        "column": 23,
        "nodeType": "MemberExpression",
        "endLine": 126,
        "endColumn": 34,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 127,
        "column": 35,
        "nodeType": "MemberExpression",
        "endLine": 127,
        "endColumn": 46,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Function Call Object Injection Sink",
        "line": 133,
        "column": 35,
        "nodeType": "MemberExpression",
        "endLine": 133,
        "endColumn": 42,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'enableUI' has a complexity of 4. Maximum allowed is 2.",
        "line": 151,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 182,
        "endColumn": 6,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 155,
        "column": 27,
        "nodeType": "MemberExpression",
        "endLine": 155,
        "endColumn": 34,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 171,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 171,
        "endColumn": 24,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/dist/index.js": {
    "filePath": "/Users/work/Documents/projects/depngn/dist/index.js",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'step' has a complexity of 32. Maximum allowed is 2.",
        "line": 35,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 56,
        "endColumn": 6
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 39 exceeds maximum 15 (24/9/30).",
        "line": 35,
        "column": 5,
        "nodeType": "FunctionDeclaration",
        "endLine": 56,
        "endColumn": 6
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 43 to the 15 allowed.",
        "line": 35,
        "column": 14,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 35,
        "endColumn": 18
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 5. Maximum allowed is 2.",
        "line": 64,
        "column": 34,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 77,
        "endColumn": 10
      },
      {
        "ruleId": "no-sparse-arrays",
        "severity": 2,
        "message": "Unexpected comma in middle of array.",
        "line": 67,
        "column": 34,
        "nodeType": "ArrayExpression",
        "messageId": "unexpectedSparseArray",
        "endLine": 67,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 96,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 96,
        "endColumn": 18
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 5. Maximum allowed is 2.",
        "line": 97,
        "column": 34,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 123,
        "endColumn": 10
      },
      {
        "ruleId": "no-sparse-arrays",
        "severity": 2,
        "message": "Unexpected comma in middle of array.",
        "line": 100,
        "column": 34,
        "nodeType": "ArrayExpression",
        "messageId": "unexpectedSparseArray",
        "endLine": 100,
        "endColumn": 45
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 3. Maximum allowed is 2.",
        "line": 103,
        "column": 50,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 114,
        "endColumn": 26
      },
      {
        "ruleId": "sonarjs/no-nested-switch",
        "severity": 2,
        "message": "Refactor the code to eliminate this nested \"switch\".",
        "line": 104,
        "column": 29,
        "nodeType": null,
        "messageId": "removeNestedSwitch",
        "endLine": 104,
        "endColumn": 35
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 105,
        "column": 128,
        "nodeType": "MemberExpression",
        "endLine": 105,
        "endColumn": 137
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'parseEngines' has a complexity of 8. Maximum allowed is 2.",
        "line": 126,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 138,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 7. Maximum allowed is 2.",
        "line": 147,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 166,
        "endColumn": 2
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 190,
        "column": 12,
        "nodeType": "MemberExpression",
        "endLine": 190,
        "endColumn": 36
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 16. Maximum allowed is 2.",
        "line": 205,
        "column": 19,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 237,
        "endColumn": 2
      },
      {
        "ruleId": "abcsize/abcsize",
        "severity": 2,
        "message": "Function ABC Size 24 exceeds maximum 15 (8/15/17).",
        "line": 205,
        "column": 19,
        "nodeType": "ArrowFunctionExpression",
        "endLine": 237,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.",
        "line": 205,
        "column": 36,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 205,
        "endColumn": 38
      },
      {
        "ruleId": "sonarjs/prefer-single-boolean-return",
        "severity": 2,
        "message": "Replace this if-then-else flow by a single return statement.",
        "line": 234,
        "column": 5,
        "nodeType": "IfStatement",
        "messageId": "replaceIfThenElseByReturn",
        "endLine": 235,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggest",
            "fix": {
              "range": [
                10148,
                10238
              ],
              "text": "return !(compareSegments(v.slice(i), r.slice(i)) === -1);"
            },
            "desc": "Replace with single return statement"
          }
        ]
      },
      {
        "ruleId": "security/detect-unsafe-regex",
        "severity": 1,
        "message": "Unsafe Regular Expression",
        "line": 238,
        "column": 16,
        "nodeType": "Literal",
        "endLine": 238,
        "endColumn": 156
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 238,
        "column": 91,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 238,
        "endColumn": 92,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                10332,
                10333
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                10332,
                10332
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 238,
        "column": 106,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 238,
        "endColumn": 107,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                10347,
                10348
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                10347,
                10347
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 238,
        "column": 126,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 238,
        "endColumn": 127,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                10367,
                10368
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                10367,
                10367
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 238,
        "column": 141,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 238,
        "endColumn": 142,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                10382,
                10383
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                10382,
                10382
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 3. Maximum allowed is 2.",
        "line": 239,
        "column": 26,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 249,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 3. Maximum allowed is 2.",
        "line": 250,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 250,
        "endColumn": 62
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 5. Maximum allowed is 2.",
        "line": 256,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 265,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 5. Maximum allowed is 2.",
        "line": 266,
        "column": 25,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 273,
        "endColumn": 2
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 268,
        "column": 34,
        "nodeType": "MemberExpression",
        "endLine": 268,
        "endColumn": 38
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 268,
        "column": 47,
        "nodeType": "MemberExpression",
        "endLine": 268,
        "endColumn": 51
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 3. Maximum allowed is 2.",
        "line": 282,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 289,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'isCompatible' has a complexity of 5. Maximum allowed is 2.",
        "line": 296,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 312,
        "endColumn": 2
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 4. Maximum allowed is 2.",
        "line": 333,
        "column": 34,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 359,
        "endColumn": 10
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 3. Maximum allowed is 2.",
        "line": 340,
        "column": 74,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 350,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 354,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 354,
        "endColumn": 45
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 357,
        "column": 43,
        "nodeType": "MemberExpression",
        "endLine": 357,
        "endColumn": 74
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 5. Maximum allowed is 2.",
        "line": 364,
        "column": 34,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 377,
        "endColumn": 10
      },
      {
        "ruleId": "no-sparse-arrays",
        "severity": 2,
        "message": "Unexpected comma in middle of array.",
        "line": 367,
        "column": 34,
        "nodeType": "ArrayExpression",
        "messageId": "unexpectedSparseArray",
        "endLine": 367,
        "endColumn": 45
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 5. Maximum allowed is 2.",
        "line": 384,
        "column": 34,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 397,
        "endColumn": 10
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function has a complexity of 9. Maximum allowed is 2.",
        "line": 412,
        "column": 34,
        "nodeType": "FunctionExpression",
        "messageId": "complex",
        "endLine": 436,
        "endColumn": 10
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 415,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 415,
        "endColumn": 42
      },
      {
        "ruleId": "no-fallthrough",
        "severity": 2,
        "message": "Expected a 'break' statement before 'case'.",
        "line": 417,
        "column": 17,
        "nodeType": "SwitchCase",
        "messageId": "case",
        "endLine": 426,
        "endColumn": 66
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 424,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 424,
        "endColumn": 32
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 432,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 432,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 37,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport { access } from 'fs/promises';\nimport path from 'path';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\nvar asyncExec = promisify(exec);\n\nfunction getDependencies(manager) {\n    return __awaiter(this, void 0, void 0, function () {\n        var list, error_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, , 3]);\n                    return [4 /*yield*/, asyncExec(manager.list)];\n                case 1:\n                    list = _a.sent();\n                    return [2 /*return*/, JSON.parse(list.stdout).dependencies];\n                case 2:\n                    error_1 = _a.sent();\n                    throw error_1;\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\n\nvar Reporter;\n(function (Reporter) {\n    Reporter[\"Terminal\"] = \"terminal\";\n    Reporter[\"Json\"] = \"json\";\n    Reporter[\"Html\"] = \"html\";\n})(Reporter || (Reporter = {}));\nvar PackageManagerName;\n(function (PackageManagerName) {\n    PackageManagerName[\"Npm\"] = \"npm\";\n    PackageManagerName[\"Yarn\"] = \"yarn\";\n})(PackageManagerName || (PackageManagerName = {}));\n\nfunction getEngines(deps, manager) {\n    return __awaiter(this, void 0, void 0, function () {\n        var depsArray, error_1;\n        var _this = this;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, , 3]);\n                    depsArray = Object.keys(deps).map(function (dep) { return __awaiter(_this, void 0, void 0, function () {\n                        var engines, range;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, asyncExec(\"\".concat(manager.engines, \" \").concat(dep, \"@\").concat(deps[dep].version, \" engines --json\"))];\n                                case 1:\n                                    engines = _a.sent();\n                                    range = parseEngines(engines, manager);\n                                    return [2 /*return*/, {\n                                            package: dep,\n                                            range: range,\n                                        }];\n                            }\n                        });\n                    }); });\n                    return [4 /*yield*/, Promise.all(depsArray)];\n                case 1: return [2 /*return*/, _a.sent()];\n                case 2:\n                    error_1 = _a.sent();\n                    throw error_1;\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction parseEngines(engines, manager) {\n    var _a;\n    var res = engines.stdout ? JSON.parse(engines.stdout) : {};\n    switch (manager.name) {\n        case PackageManagerName.Npm:\n            return res.node ? res.node : '';\n        case PackageManagerName.Yarn:\n            return ((_a = res.data) === null || _a === void 0 ? void 0 : _a.node) ? res.data.node : '';\n        default:\n            var wrong = manager.name;\n            throw new Error(\"This error shouldn't happen, but somehow an invalid package manager made it through checks: \".concat(wrong, \".\"));\n    }\n}\n\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nconst compareVersions = (v1, v2) => {\n    // validate input and split into segments\n    const n1 = validateAndParse(v1);\n    const n2 = validateAndParse(v2);\n    // pop off the patch\n    const p1 = n1.pop();\n    const p2 = n2.pop();\n    // validate numbers\n    const r = compareSegments(n1, n2);\n    if (r !== 0)\n        return r;\n    // validate pre-release\n    if (p1 && p2) {\n        return compareSegments(p1.split('.'), p2.split('.'));\n    }\n    else if (p1 || p2) {\n        return p1 ? -1 : 1;\n    }\n    return 0;\n};\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\nconst compare = (v1, v2, operator) => {\n    // validate input operator\n    assertValidOperator(operator);\n    // since result of compareVersions can only be -1 or 0 or 1\n    // a simple map can be used to replace switch\n    const res = compareVersions(v1, v2);\n    return operatorResMap[operator].includes(res);\n};\n/**\n * Match [npm semver](https://docs.npmjs.com/cli/v6/using-npm/semver) version range.\n *\n * @param version Version number to match\n * @param range Range pattern for version\n * @returns `true` if the version number is within the range, `false` otherwise.\n *\n * @example\n * ```\n * satisfies('1.1.0', '^1.0.0'); // return true\n * satisfies('1.1.0', '~1.0.0'); // return false\n * ```\n */\nconst satisfies = (version, range) => {\n    // if no range operator then \"=\"\n    const m = range.match(/^([<>=~^]+)/);\n    const op = m ? m[1] : '=';\n    // if gt/lt/eq then operator compare\n    if (op !== '^' && op !== '~')\n        return compare(version, range, op);\n    // else range of either \"~\" or \"^\" is assumed\n    const [v1, v2, v3, , vp] = validateAndParse(version);\n    const [r1, r2, r3, , rp] = validateAndParse(range);\n    const v = [v1, v2, v3];\n    const r = [r1, r2 !== null && r2 !== void 0 ? r2 : 'x', r3 !== null && r3 !== void 0 ? r3 : 'x'];\n    // validate pre-release\n    if (rp) {\n        if (!vp)\n            return false;\n        if (compareSegments(v, r) !== 0)\n            return false;\n        if (compareSegments(vp.split('.'), rp.split('.')) === -1)\n            return false;\n    }\n    // first non-zero number\n    const nonZero = r.findIndex((v) => v !== '0') + 1;\n    // pointer to where segments can be >=\n    const i = op === '~' ? 2 : nonZero > 1 ? nonZero : 1;\n    // before pointer must be equal\n    if (compareSegments(v.slice(0, i), r.slice(0, i)) !== 0)\n        return false;\n    // after pointer must be >=\n    if (compareSegments(v.slice(i), r.slice(i)) === -1)\n        return false;\n    return true;\n};\nconst semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\nconst validateAndParse = (version) => {\n    if (typeof version !== 'string') {\n        throw new TypeError('Invalid argument expected string');\n    }\n    const match = version.match(semver);\n    if (!match) {\n        throw new Error(`Invalid argument not valid semver ('${version}' received)`);\n    }\n    match.shift();\n    return match;\n};\nconst isWildcard = (s) => s === '*' || s === 'x' || s === 'X';\nconst tryParse = (v) => {\n    const n = parseInt(v, 10);\n    return isNaN(n) ? v : n;\n};\nconst forceType = (a, b) => typeof a !== typeof b ? [String(a), String(b)] : [a, b];\nconst compareStrings = (a, b) => {\n    if (isWildcard(a) || isWildcard(b))\n        return 0;\n    const [ap, bp] = forceType(tryParse(a), tryParse(b));\n    if (ap > bp)\n        return 1;\n    if (ap < bp)\n        return -1;\n    return 0;\n};\nconst compareSegments = (a, b) => {\n    for (let i = 0; i < Math.max(a.length, b.length); i++) {\n        const r = compareStrings(a[i] || '0', b[i] || '0');\n        if (r !== 0)\n            return r;\n    }\n    return 0;\n};\nconst operatorResMap = {\n    '>': [1],\n    '>=': [0, 1],\n    '=': [0],\n    '<=': [-1, 0],\n    '<': [-1],\n};\nconst allowedOperators = Object.keys(operatorResMap);\nconst assertValidOperator = (op) => {\n    if (typeof op !== 'string') {\n        throw new TypeError(`Invalid operator type, expected string but got ${typeof op}`);\n    }\n    if (allowedOperators.indexOf(op) === -1) {\n        throw new Error(`Invalid operator, expected one of ${allowedOperators.join('|')}`);\n    }\n};\n\nfunction getPackageData(dep, version) {\n    var range = dep.range ? dep.range : 'n/a';\n    var compatible = isCompatible(version, dep.range);\n    return { compatible: compatible, range: range };\n}\nfunction isCompatible(nodeVersion, depRange) {\n    if (!depRange)\n        return undefined;\n    // if a dependency has `*` for the node version, it's always compatible\n    if (['x', '*'].includes(depRange))\n        return true;\n    var compatible;\n    var logicalOrRegEx = /\\|\\|/;\n    if (depRange && logicalOrRegEx.test(depRange)) {\n        var rangeArray = depRange.split('||').map(function (range) { return range.replaceAll(' ', ''); });\n        compatible = rangeArray.some(function (range) { return satisfies(nodeVersion, range); });\n    }\n    else {\n        compatible = satisfies(nodeVersion, depRange.replaceAll(' ', ''));\n    }\n    return compatible;\n}\n\nvar _a;\nvar PACKAGE_MANAGER = (_a = {},\n    _a[PackageManagerName.Npm] = {\n        name: PackageManagerName.Npm,\n        list: 'npm ls --depth=0 --json',\n        engines: 'npm view',\n    },\n    _a[PackageManagerName.Yarn] = {\n        name: PackageManagerName.Yarn,\n        // `yarn list --depth=0` is misleading and includes dependencies of dependencies\n        // for some reason, `npm ls` works with `yarn` apps?\n        // context: https://github.com/yarnpkg/yarn/issues/3569\n        list: 'npm ls --depth=0 --json',\n        engines: 'yarn info',\n    },\n    _a);\nfunction getPackageManager() {\n    return __awaiter(this, void 0, void 0, function () {\n        var managerChecks, packageManager, currentCwd;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    managerChecks = [\n                        pathExists('package-lock.json'),\n                        pathExists('yarn.lock'),\n                    ];\n                    return [4 /*yield*/, Promise.all(managerChecks).then(function (_a) {\n                            var isNpm = _a[0], isYarn = _a[1];\n                            var manager;\n                            if (isNpm) {\n                                manager = PackageManagerName.Npm;\n                            }\n                            else if (isYarn) {\n                                manager = PackageManagerName.Yarn;\n                            }\n                            return manager;\n                        })];\n                case 1:\n                    packageManager = _a.sent();\n                    if (!packageManager) {\n                        currentCwd = process.cwd();\n                        throw new Error(\"Could not determine package manager. You may be missing a lock file or using an unsupported package manager.\\nThe search was performed on the path - \".concat(currentCwd));\n                    }\n                    return [2 /*return*/, PACKAGE_MANAGER[packageManager]];\n            }\n        });\n    });\n}\nfunction pathExists(path) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _b.trys.push([0, 2, , 3]);\n                    return [4 /*yield*/, access(path)];\n                case 1:\n                    _b.sent();\n                    return [2 /*return*/, true];\n                case 2:\n                    _b.sent();\n                    return [2 /*return*/, false];\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\n\nfunction getCompatData(version) {\n    return __awaiter(this, void 0, void 0, function () {\n        var manager, deps, engines;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, getPackageManager()];\n                case 1:\n                    manager = _a.sent();\n                    return [4 /*yield*/, getDependencies(manager)];\n                case 2:\n                    deps = _a.sent();\n                    return [4 /*yield*/, getEngines(deps, manager)];\n                case 3:\n                    engines = _a.sent();\n                    return [2 /*return*/, createCompatData(engines, version)];\n            }\n        });\n    });\n}\nfunction createCompatData(compatData, version) {\n    var compatObject = {};\n    compatData.forEach(function (dep) {\n        compatObject[dep.package] = getPackageData(dep, version);\n    });\n    return compatObject;\n}\n\nfunction depngn(_a) {\n    var cwd = _a.cwd, version = _a.version;\n    return __awaiter(this, void 0, void 0, function () {\n        var originalCwd, error_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    originalCwd = process.cwd();\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 3, 4, 5]);\n                    if (cwd && originalCwd !== cwd) {\n                        // There is no other way to get dependencies while using npm\n                        // rather than being in that particular directory and running a command\n                        // So it is irrelevant to pass the cwd argument down to be further used\n                        // to resolve the path\n                        process.chdir(path.resolve(cwd));\n                    }\n                    return [4 /*yield*/, getCompatData(version)];\n                case 2: return [2 /*return*/, _b.sent()];\n                case 3:\n                    error_1 = _b.sent();\n                    throw new Error(\"\".concat(error_1));\n                case 4:\n                    process.chdir(originalCwd);\n                    return [7 /*endfinally*/];\n                case 5: return [2 /*return*/];\n            }\n        });\n    });\n}\n\nexport { depngn };\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/jest.config.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/jest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/rollup.config.js": {
    "filePath": "/Users/work/Documents/projects/depngn/rollup.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/index.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/index.ts",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async function 'cli' has a complexity of 3. Maximum allowed is 2.",
        "line": 8,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 25,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { execWithLog } from './log';\nimport { parseCliArgs } from './parse';\nimport { createReport } from './reporter';\nimport { createUsage } from './usage';\nimport { validateArgs } from './validate';\nimport { depngn } from '../';\n\nexport async function cli() {\n  try {\n    const { version, reporter, help, cwd } = parseCliArgs();\n    if (help) {\n      createUsage();\n    } else {\n      validateArgs({ version, reporter, cwd });\n      const compatData = await execWithLog(\n        'Fetching engine data',\n        async () => await depngn({ version, cwd })\n      );\n      await createReport(compatData, version, reporter);\n    }\n  } catch (error) {\n    console.error(error);\n    process.exitCode = 1;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/log.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/log.ts",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 19,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 19,
        "endColumn": 36
      },
      {
        "ruleId": "sonarjs/prefer-immediate-return",
        "severity": 2,
        "message": "Immediately return this expression instead of assigning it to the temporary variable \"output\".",
        "line": 27,
        "column": 20,
        "nodeType": "AwaitExpression",
        "messageId": "doImmediateAction",
        "endLine": 27,
        "endColumn": 36,
        "fix": {
          "range": [
            613,
            663
          ],
          "text": "return await callback()"
        }
      },
      {
        "ruleId": "sonarjs/no-useless-catch",
        "severity": 2,
        "message": "Add logic to this catch clause or eliminate it and rethrow the exception automatically.",
        "line": 29,
        "column": 5,
        "nodeType": null,
        "messageId": "uselessCatch",
        "endLine": 29,
        "endColumn": 10
      },
      {
        "ruleId": "no-useless-catch",
        "severity": 2,
        "message": "Unnecessary catch clause.",
        "line": 29,
        "column": 5,
        "nodeType": "CatchClause",
        "messageId": "unnecessaryCatchClause",
        "endLine": 31,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import process from 'process';\nimport { green } from 'kleur/colors';\nimport onExit from 'signal-exit';\n\nexport async function execWithLog<T>(text: string, callback: () => Promise<T>) {\n  // this is necessary because the \n  // cursor could remain hidden when \n  // exited with `^C`\n  onExit(() => {\n    showCursor();\n  });\n\n  const dots = ['', '.', '..', '...'];\n  let index = 0;\n\n  hideCursor();\n  const loadingAnimation = setInterval(() => {\n    clearLog();\n    logUpdate(`${text}${dots[index]}`);\n    if (index === dots.length - 1) {\n      index = 0;\n    } else {\n      index += 1;\n    }\n  }, 200);\n  try {\n    const output = await callback();\n    return output;\n  } catch (error) {\n    throw error;\n  } finally {\n    clearInterval(loadingAnimation);\n    clearLog();\n    showCursor();\n  }\n}\n\nexport function hideCursor() {\n  process.stdout.write('\\x1B[?25l');\n}\n\nexport function showCursor() {\n  process.stdout.write('\\x1B[?25h');\n}\n\nexport function logUpdate(text: string) {\n  process.stdout.write(green(text));\n}\n\nexport function clearLog() {\n  process.stdout.clearLine(0);\n  process.stdout.cursorTo(0);\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/parse.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/parse.ts",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'parseCliArgs' has a complexity of 3. Maximum allowed is 2.",
        "line": 5,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 19,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import arg from 'arg';\nimport { versions } from 'process';\nimport { Reporter } from \"../types\";\n\nexport function parseCliArgs() {\n    const args = arg({\n      '--help': Boolean,\n      '--reporter': String,\n      '--cwd': String,\n      '-h': '--help',\n      '-r': '--reporter',\n    });\n    const version = args._[0] ?? versions.node;\n    const reporter = (args['--reporter']) as Reporter ?? Reporter.Terminal;\n    const help = args['--help'];\n    const cwd = args['--cwd'];\n\n    return { version, reporter, help, cwd };\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/reporter/html.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/reporter/html.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-inferrable-types",
        "severity": 2,
        "message": "Type string trivially inferred from a string literal, remove type annotation.",
        "line": 4,
        "column": 91,
        "nodeType": "AssignmentPattern",
        "messageId": "noInferrableType",
        "endLine": 4,
        "endColumn": 119,
        "fix": {
          "range": [
            178,
            186
          ],
          "text": ""
        }
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 3. Maximum allowed is 2.",
        "line": 38,
        "column": 10,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 48,
        "endColumn": 6
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 39,
        "column": 26,
        "nodeType": "MemberExpression",
        "endLine": 39,
        "endColumn": 41
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 45,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 45,
        "endColumn": 32
      },
      {
        "ruleId": "security/detect-non-literal-fs-filename",
        "severity": 1,
        "message": "Found writeFile from package \"fs/promises\" with non literal argument at index 0",
        "line": 72,
        "column": 9,
        "nodeType": "CallExpression",
        "endLine": 72,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import { writeFile } from 'fs/promises';\nimport { CompatData } from '../../types';\n\nexport async function createHtml(compatData: Record<string, CompatData>, version: string, path: string = 'compat.html') {\n  const compatDataKeys = Object.keys(compatData);\n  const classGreen = \"green\";\n  const classRed = \"red\";\n  const classYellow = \"yellow\";\n\n  const style = `\n  h1{\n    font-family: arial, sans-serif;\n  }\n  table {\n    font-family: arial, sans-serif;\n    border-collapse: collapse;\n    width: 100%;\n  }\n  td, th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n  }\n  tr:nth-child(even) {\n    background-color: #dddddd;\n  }\n  .${classRed}{\n    color: #ff0000;\n  }\n  .${classGreen}{\n    color: #0f9b4e;\n  }\n  .${classYellow}{\n    color: #ce8d02;\n  }`\n\n  const tableData = compatDataKeys\n    .map((key) => {\n      const compatible = compatData[key].compatible;\n      const compatibleClass = compatible === undefined ? classYellow : compatible ? classGreen : classRed;\n      return `\n        <tr>\n          <td>${key}</td>\n          <td class=\"${compatibleClass}\">${compatible}</td>\n          <td>${compatData[key].range}</td>\n        </tr>\n        `\n    })\n    .join(\"\");\n\n  const out = `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n    <style>\n      ${style}\n    </style>\n    <title>depngn</title>\n  </head>\n  <body>\n    <h1>Node version: ${version}</h1>\n    <table>\n      <tr>\n        <th>package</th>\n        <th>compatible</th>\n        <th>range</th>\n      </tr>\n      ${tableData}\n    </table> \n  </body>\n  </html>`\n\n  await writeFile(path, out);\n  console.log(`File generated at ${path}`);\n}",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/reporter/index.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/reporter/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/reporter/json.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/reporter/json.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-inferrable-types",
        "severity": 2,
        "message": "Type string trivially inferred from a string literal, remove type annotation.",
        "line": 4,
        "column": 91,
        "nodeType": "AssignmentPattern",
        "messageId": "noInferrableType",
        "endLine": 4,
        "endColumn": 119,
        "fix": {
          "range": [
            178,
            186
          ],
          "text": ""
        }
      },
      {
        "ruleId": "security/detect-non-literal-fs-filename",
        "severity": 1,
        "message": "Found writeFile from package \"fs/promises\" with non literal argument at index 0",
        "line": 9,
        "column": 9,
        "nodeType": "CallExpression",
        "endLine": 9,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import { writeFile } from 'fs/promises';\nimport { CompatData } from '../../types';\n\nexport async function createJson(compatData: Record<string, CompatData>, version: string, path: string = 'compat.json') {\n  const out = JSON.stringify({\n    node: version,\n    dependencies: compatData,\n  }, null, 2);\n  await writeFile(path, out);\n  console.log(`File generated at ${path}`);\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/reporter/report.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/reporter/report.ts",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'createReport' has a complexity of 4. Maximum allowed is 2.",
        "line": 6,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 24,
        "endColumn": 2
      },
      {
        "ruleId": "no-case-declarations",
        "severity": 2,
        "message": "Unexpected lexical declaration in case block.",
        "line": 19,
        "column": 7,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpected",
        "endLine": 19,
        "endColumn": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createJson } from './json';\nimport { createTable} from './table';\nimport { CompatData, Reporter } from '../../types';\nimport { createHtml } from './html';\n\nexport function createReport(\n  compatData: Record<string, CompatData>,\n  version: string,\n  reporter: Reporter\n) {\n  switch (reporter) {\n    case Reporter.Terminal:\n      return createTable(compatData, version);\n    case Reporter.Json:\n      return createJson(compatData, version);\n    case Reporter.Html:\n      return createHtml(compatData, version);\n    default:\n      const wrong = reporter as never;\n      throw new Error(\n        `This error shouldn't happen, but somehow you entered an invalid reporter and it made it past the first check: ${wrong}.`\n      );\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/reporter/table.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/reporter/table.ts",
    "messages": [
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Variable Assigned to Object Injection Sink",
        "line": 10,
        "column": 35,
        "nodeType": "MemberExpression",
        "endLine": 10,
        "endColumn": 50
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'toColorString' has a complexity of 3. Maximum allowed is 2.",
        "line": 24,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 28,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { blue, green, red, yellow } from 'kleur/colors';\nimport { table, TableUserConfig } from 'table';\nimport { CompatData } from '../../types';\n\nexport function createTable(compatData: Record<string, CompatData>, version: string) {\n  const titles = ['package', 'compatible', 'range'].map((title) =>\n    blue(title)\n  );\n  const out = Object.keys(compatData).map((dep) => {\n    const { compatible, range } = compatData[dep];\n    return [dep, toColorString(compatible), range];\n  });\n  out.unshift(titles);\n\n  const config: TableUserConfig = {\n    header: {\n      alignment: 'center',\n      content: green(`\\nNode version: ${version}\\n`),\n    },\n  };\n  console.log(table(out, config));\n}\n\nfunction toColorString(value: boolean | undefined) {\n  if (value === undefined) return yellow('undefined');\n  const outputColor = value ? green : red;\n  return outputColor(value.toString());\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/usage.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/usage.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/cli/validate.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/cli/validate.ts",
    "messages": [
      {
        "ruleId": "security/detect-non-literal-fs-filename",
        "severity": 1,
        "message": "Found existsSync from package \"fs\" with non literal argument at index 0",
        "line": 31,
        "column": 3,
        "nodeType": "CallExpression",
        "endLine": 31,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { validate } from 'compare-versions';\nimport { green, red } from 'kleur/colors';\nimport fs from \"fs\";\nimport { CliParsedOptions } from \"../types\";\n\nconst REPORTERS = ['terminal', 'json', 'html'];\n\nexport function validateArgs({ version, reporter, cwd }: CliParsedOptions) {\n  validateNodeVersion(version);\n  validateReporter(reporter);\n  if (cwd) validateCwd(cwd);\n}\n\nfunction validateNodeVersion(nodeVersion: string) {\n  if (!validate(nodeVersion)) {\n    throw new Error(`Invalid Node version: ${red(nodeVersion)}.`);\n  }\n}\n\nfunction validateReporter(reporter: string) {\n  if (!REPORTERS.includes(reporter)) {\n    throw new Error(\n      `Invalid reporter: ${red(reporter)}. Valid options are: ${green(\n        REPORTERS.join(', ')\n      )}.`\n    );\n  }\n}\n\nfunction validateCwd(cwd: string) {\n  fs.existsSync(cwd);\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/index.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/index.ts",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Async function 'depngn' has a complexity of 4. Maximum allowed is 2.",
        "line": 5,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 21,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getCompatData } from './queries';\nimport { Options } from \"./types\";\nimport path from \"path\";\n\nexport async function depngn({ cwd, version }: Options) {\n  const originalCwd = process.cwd();\n  try {\n    if (cwd && originalCwd !== cwd) {\n      // There is no other way to get dependencies while using npm\n      // rather than being in that particular directory and running a command\n      // So it is irrelevant to pass the cwd argument down to be further used\n      // to resolve the path\n      process.chdir(path.resolve(cwd));\n    }\n    return await getCompatData(version);\n  } catch (error) {\n    throw new Error(`${error}`);\n  } finally {\n    process.chdir(originalCwd);\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/queries/exec.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/queries/exec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/queries/getCompatData.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/queries/getCompatData.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/queries/getDependencies.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/queries/getDependencies.ts",
    "messages": [
      {
        "ruleId": "no-useless-catch",
        "severity": 2,
        "message": "Unnecessary try/catch wrapper.",
        "line": 5,
        "column": 3,
        "nodeType": "TryStatement",
        "messageId": "unnecessaryCatch",
        "endLine": 10,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/no-useless-catch",
        "severity": 2,
        "message": "Add logic to this catch clause or eliminate it and rethrow the exception automatically.",
        "line": 8,
        "column": 5,
        "nodeType": null,
        "messageId": "uselessCatch",
        "endLine": 8,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { asyncExec } from './exec';\nimport { PackageList, Manager } from '../types';\n\nexport async function getDependencies(manager: Manager): Promise<PackageList> {\n  try {\n    const list = await asyncExec(manager.list);\n    return JSON.parse(list.stdout).dependencies;\n  } catch (error) {\n    throw error;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/queries/getEngines.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/queries/getEngines.ts",
    "messages": [
      {
        "ruleId": "no-useless-catch",
        "severity": 2,
        "message": "Unnecessary try/catch wrapper.",
        "line": 5,
        "column": 3,
        "nodeType": "TryStatement",
        "messageId": "unnecessaryCatch",
        "endLine": 20,
        "endColumn": 4
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 8,
        "column": 38,
        "nodeType": "MemberExpression",
        "endLine": 8,
        "endColumn": 47
      },
      {
        "ruleId": "sonarjs/no-useless-catch",
        "severity": 2,
        "message": "Add logic to this catch clause or eliminate it and rethrow the exception automatically.",
        "line": 18,
        "column": 5,
        "nodeType": null,
        "messageId": "uselessCatch",
        "endLine": 18,
        "endColumn": 10
      },
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'parseEngines' has a complexity of 6. Maximum allowed is 2.",
        "line": 23,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 39,
        "endColumn": 2
      },
      {
        "ruleId": "no-case-declarations",
        "severity": 2,
        "message": "Unexpected lexical declaration in case block.",
        "line": 34,
        "column": 7,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpected",
        "endLine": 34,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { asyncExec } from './exec';\nimport { Manager, PackageList, PackageManagerName } from '../types';\n\nexport async function getEngines(deps: PackageList, manager: Manager) {\n  try {\n    const depsArray = Object.keys(deps).map(async (dep) => {\n      const engines = await asyncExec(\n        `${manager.engines} ${dep}@${deps[dep].version} engines --json`\n      );\n      const range = parseEngines(engines, manager);\n      return {\n        package: dep,\n        range,\n      };\n    });\n\n    return await Promise.all(depsArray);\n  } catch (error) {\n    throw error;\n  }\n}\n\nfunction parseEngines(\n  engines: { stdout: string; stderr: string },\n  manager: Manager\n) {\n  const res = engines.stdout ? JSON.parse(engines.stdout) : {};\n  switch (manager.name) {\n    case PackageManagerName.Npm:\n      return res.node ? res.node : '';\n    case PackageManagerName.Yarn:\n      return res.data?.node ? res.data.node : '';\n    default:\n      const wrong = manager.name as never;\n      throw new Error(\n        `This error shouldn't happen, but somehow an invalid package manager made it through checks: ${wrong}.`\n      );\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/queries/getPackageData.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/queries/getPackageData.ts",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Function 'isCompatible' has a complexity of 5. Maximum allowed is 2.",
        "line": 10,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "complex",
        "endLine": 26,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { satisfies } from 'compare-versions';\nimport { EnginesData } from '../types';\n\nexport function getPackageData(dep: EnginesData, version: string) {\n  const range = dep.range ? dep.range : 'n/a';\n  const compatible = isCompatible(version, dep.range);\n  return { compatible, range };\n}\n\nfunction isCompatible(nodeVersion: string, depRange: string) {\n  if (!depRange) return undefined;\n\n  // if a dependency has `*` for the node version, it's always compatible\n  if (['x', '*'].includes(depRange)) return true;\n\n  let compatible;\n\n  const logicalOrRegEx = /\\|\\|/;\n  if (depRange && logicalOrRegEx.test(depRange)) {\n    const rangeArray = depRange.split('||').map((range) => range.replaceAll(' ', ''));\n    compatible = rangeArray.some((range) => satisfies(nodeVersion, range));\n  } else {\n    compatible = satisfies(nodeVersion, depRange.replaceAll(' ', ''));\n  }\n  return compatible;\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/queries/getPackageManager.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/queries/getPackageManager.ts",
    "messages": [
      {
        "ruleId": "complexity",
        "severity": 2,
        "message": "Arrow function has a complexity of 3. Maximum allowed is 2.",
        "line": 27,
        "column": 10,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "complex",
        "endLine": 35,
        "endColumn": 4
      },
      {
        "ruleId": "security/detect-object-injection",
        "severity": 1,
        "message": "Generic Object Injection Sink",
        "line": 42,
        "column": 10,
        "nodeType": "MemberExpression",
        "endLine": 42,
        "endColumn": 41
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { access } from 'fs/promises';\nimport { Manager, PackageManagerName } from '../types';\n\nconst PACKAGE_MANAGER: Record<string, Manager> = {\n  [PackageManagerName.Npm]: {\n    name: PackageManagerName.Npm,\n    list: 'npm ls --depth=0 --json',\n    engines: 'npm view',\n  },\n  [PackageManagerName.Yarn]: {\n    name: PackageManagerName.Yarn,\n    // `yarn list --depth=0` is misleading and includes dependencies of dependencies\n    // for some reason, `npm ls` works with `yarn` apps?\n    // context: https://github.com/yarnpkg/yarn/issues/3569\n    list: 'npm ls --depth=0 --json',\n    engines: 'yarn info',\n  },\n};\n\nexport async function getPackageManager(): Promise<Manager> {\n  const managerChecks = [\n    pathExists('package-lock.json'),\n    pathExists('yarn.lock'),\n  ];\n  const packageManager: PackageManagerName | undefined = await Promise.all(\n    managerChecks\n  ).then(([isNpm, isYarn]) => {\n    let manager: PackageManagerName | undefined;\n    if (isNpm) {\n      manager = PackageManagerName.Npm;\n    } else if (isYarn) {\n      manager = PackageManagerName.Yarn;\n    }\n    return manager;\n  });\n  if (!packageManager) {\n    const currentCwd = process.cwd();\n    throw new Error(\n      `Could not determine package manager. You may be missing a lock file or using an unsupported package manager.\\nThe search was performed on the path - ${currentCwd}`\n    );\n  }\n  return PACKAGE_MANAGER[packageManager];\n}\n\nasync function pathExists(path: string) {\n  try {\n    await access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/queries/index.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/queries/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/src/types.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/src/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/tests/cli/usage.spec.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/tests/cli/usage.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  "/Users/work/Documents/projects/depngn/tests/engine/cwd-option.spec.ts": {
    "filePath": "/Users/work/Documents/projects/depngn/tests/engine/cwd-option.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
}
